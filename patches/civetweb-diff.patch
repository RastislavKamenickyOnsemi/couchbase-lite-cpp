diff --git a/src/civetweb.c b/src/civetweb.c
index 2b49e367..729d5079 100644
--- a/src/civetweb.c
+++ b/src/civetweb.c
@@ -20,6 +20,10 @@
  * THE SOFTWARE.
  */
 
+#if !defined SSL_LIB || !defined CRYPTO_LIB
+#define NO_SSL
+#endif
+
 #if defined(_WIN32)
 #if !defined(_CRT_SECURE_NO_WARNINGS)
 #define _CRT_SECURE_NO_WARNINGS /* Disable deprecation warning in VS2005 */
@@ -323,14 +327,6 @@ typedef long off_t;
 #define ERRNO ((int)(GetLastError()))
 #define NO_SOCKLEN_T
 
-#if defined(_WIN64) || defined(__MINGW64__)
-#define SSL_LIB "ssleay64.dll"
-#define CRYPTO_LIB "libeay64.dll"
-#else
-#define SSL_LIB "ssleay32.dll"
-#define CRYPTO_LIB "libeay32.dll"
-#endif
-
 #define O_NONBLOCK (0)
 #ifndef W_OK
 #define W_OK (2) /* http://msdn.microsoft.com/en-us/library/1w06ktdy.aspx */
@@ -521,10 +517,7 @@ typedef unsigned short int in_port_t;
 #include <dlfcn.h>
 #endif
 #include <pthread.h>
-#if defined(__MACH__)
-#define SSL_LIB "libssl.dylib"
-#define CRYPTO_LIB "libcrypto.dylib"
-#else
+#if !defined(__MACH__)
 #if !defined(SSL_LIB)
 #define SSL_LIB "libssl.so"
 #endif
@@ -4940,10 +4933,10 @@ push(struct mg_context *ctx,
 			return -1;
 		}
 
-        if (ctx->stop_flag) {
-            return -1;
-        }
-
+        if (ctx->stop_flag) {
+            return -1;
+        }
+
 		/* Only in case n=0 (timeout), repeat calling the write function */
 
 		if (timeout >= 0) {
@@ -7315,7 +7308,7 @@ connect_socket(struct mg_context *ctx /* may be NULL */,
                   error,
                   MG_ERR_SSL_UNINITIALIZED,
                   "%s",
-                  "SSL is not initialized");
+                  "SSL is not initialized OPENSSL_API_1_1");
 		return 0;
 	}
 #else
@@ -7324,7 +7317,7 @@ connect_socket(struct mg_context *ctx /* may be NULL */,
                   error,
                   MG_ERR_SSL_UNINITIALIZED,
                   "%s",
-                  "SSL is not initialized");
+                  "SSL is not initialized SSLv23_");
 		return 0;
 	}
 
@@ -12648,7 +12641,7 @@ static void *
 	struct ssl_func *fp;
 	int ok;
 	int truncated = 0;
-
+    printf("\nDynamic library name: %s\n", dll_name);
 	if ((dll_handle = dlopen(dll_name, RTLD_LAZY)) == NULL) {
         set_error(NULL,
                   error,
@@ -12657,6 +12650,7 @@ static void *
                   __func__,
                   dll_name,
                   dlerror());
+        printf("\nCannot load %s\n", dll_name);
 		return NULL;
 	}
 
@@ -12696,8 +12690,7 @@ static void *
 					}
 				}
 			}
-			/* Debug:
-			 * printf("Missing function: %s\n", fp->name); */
+			printf("Missing function: %s\n", fp->name);
 		} else {
 			fp->ptr = u.fp;
 		}
@@ -12732,6 +12725,16 @@ static int
     clear_error(error);
 
 #if !defined(NO_SSL_DL)
+    if (!ssllib_dll_handle) {
+        ssllib_dll_handle = load_dll(error, SSL_LIB, ssl_sw);
+		if (!ssllib_dll_handle) {
+			printf("\nFailed to set ssllib_dll_handle\n");
+		    return 0;
+		}
+	}
+
+    clear_error(error);
+
 	if (!cryptolib_dll_handle) {
 		cryptolib_dll_handle = load_dll(error, CRYPTO_LIB, crypto_sw);
 		if (!cryptolib_dll_handle) {
@@ -12751,12 +12754,14 @@ static int
     clear_error(error);
 
 #if !defined(NO_SSL_DL)
+#if defined SSL_LIB && defined CRYPTO_LIB
 	if (!cryptolib_dll_handle) {
 		cryptolib_dll_handle = load_dll(error, CRYPTO_LIB, crypto_sw);
 		if (!cryptolib_dll_handle) {
 			return 0;
 		}
 	}
+#endif
 #endif /* NO_SSL_DL */
 
 	if (mg_atomic_inc(&cryptolib_users) > 1) {
@@ -12925,6 +12930,7 @@ set_ssl_option(struct mg_context *ctx)
 	}
 
 #if !defined(NO_SSL_DL)
+#if defined SSL_LIB && defined CRYPTO_LIB
 	if (!ssllib_dll_handle) {
 		ssllib_dll_handle = load_dll(&error, SSL_LIB, ssl_sw);
 		if (!ssllib_dll_handle) {
@@ -12932,6 +12938,7 @@ set_ssl_option(struct mg_context *ctx)
 			return 0;
 		}
 	}
+#endif
 #endif /* NO_SSL_DL */
 
 #ifdef OPENSSL_API_1_1
@@ -14169,7 +14176,7 @@ mg_connect_websocket_client2(const char *host,
                       error,
                       MG_ERR_HTTP_STATUS_BASE + httpStatus,
                       "Unexpected response status %s %s",
-                      conn->request_info.request_uri,
+                      conn->request_info.request_uri,
                       conn->request_info.http_version);
 		}
 		DEBUG_TRACE("Websocket client connect error: %s\r\n", error->buffer);
